{"version":3,"sources":["webpack:///src/app/pages/images/images.page.html","webpack:///src/app/pages/images/images-routing.module.ts","webpack:///src/app/pages/images/images.module.ts","webpack:///src/app/pages/images/images.page.scss","webpack:///src/app/pages/images/images.page.ts"],"names":["routes","path","component","ImagesPageRoutingModule","imports","forChild","exports","ImagesPageModule","declarations","ImagesPage","core","page","getPosts","refresher","infiniteScroll","params","format","subscribe","posts","length","over","concat","target","complete","loaded","err","updateTime","selector","template"],"mappings":"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","file":"pages-images-images-module-es5.js","sourcesContent":["export default \"<ion-content #content>\\n  <!-- Refresh -->\\n  <app-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event)\\\"></app-refresher>\\n  <!-- no data -->\\n  <app-no-data *ngIf=\\\"loaded && (!posts || posts.length < 1)\\\"></app-no-data>\\n  <!-- loading -->\\n  <app-loading *ngIf=\\\"!loaded\\\"></app-loading>\\n  <!-- List posts -->\\n  <app-list-posts *ngIf=\\\"posts\\\" [posts]=\\\"posts\\\" templates=\\\"card\\\"></app-list-posts>\\n  <!-- Load more -->\\n  <app-infinite-scroll threshold=\\\"45%\\\" (ionInfinite)=\\\"load($event)\\\" *ngIf=\\\"!over && posts?.length > 0\\\"></app-infinite-scroll>\\n  <!-- Go to top -->\\n  <app-goto-top slot=\\\"fixed\\\" [content]=\\\"content\\\"></app-goto-top>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ImagesPage } from './images.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ImagesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ImagesPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ImagesPageRoutingModule } from './images-routing.module';\n\nimport { ImagesPage } from './images.page';\nimport { ComponentsModule } from 'src/app/components/components.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ComponentsModule,\n    ImagesPageRoutingModule\n  ],\n  declarations: [ImagesPage]\n})\nexport class ImagesPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2ltYWdlcy9pbWFnZXMucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { CoreService } from 'src/app/services/core.service';\n\n@Component({\n  selector: 'app-images',\n  templateUrl: './images.page.html',\n  styleUrls: ['./images.page.scss'],\n})\nexport class ImagesPage implements OnInit {\n  // page of posts\n  page = 1;\n  // array Play posts\n  posts: Object[];\n  // set true when loaded posts\n  loaded: boolean;\n  // true if haven't posts when load more disable infiniteScroll\n  over: boolean;\n\n  constructor(\n    private core: CoreService,\n  ) {\n    this.getPosts();\n  }\n\n  ngOnInit() {\n  }\n\n  getPosts(refresher?, infiniteScroll?) {\n    // get posts with page then concat to list post\n    let params = { format: 'image', page: (refresher ? 1 : this.page) };\n    this.core.getPosts(params).subscribe(posts => {\n      if (refresher) this.page = 1;\n      if (posts.length > 0) this.page++;\n      else this.over = true;\n      if (infiniteScroll) {\n        this.posts = this.posts.concat(posts);\n        infiniteScroll.target.complete();\n      }\n      else this.posts = posts;\n      this.loaded = true;\n      if (refresher) refresher.target.complete();\n    }, err => {\n      if (infiniteScroll) infiniteScroll.target.complete();\n      if (refresher) refresher.target.complete();\n      this.loaded = true;\n    });\n  }\n\n  doRefresh(refresher) {\n    // when refresh\n    this.over = false;\n    this.core.updateTime();\n    this.getPosts(refresher);\n  }\n\n  load(infiniteScroll) {\n    // when scroll to bottom\n    this.getPosts(null, infiniteScroll);\n  }\n}\n"]}