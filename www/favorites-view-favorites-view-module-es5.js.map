{"version":3,"sources":["webpack:///src/app/pages/favorites-view/favorites-view.page.html","webpack:///src/app/pages/favorites-view/favorites-view-routing.module.ts","webpack:///src/app/pages/favorites-view/favorites-view.module.ts","webpack:///src/app/pages/favorites-view/favorites-view.page.scss","webpack:///src/app/pages/favorites-view/favorites-view.page.ts"],"names":["routes","path","component","FavoritesViewPageRoutingModule","imports","forChild","exports","FavoritesViewPageModule","declarations","FavoritesViewPage","storage","core","page","doRefresh","favorites","get","then","res","JSON","stringify","loaded","posts","refresher","over","updateTime","getPosts","infiniteScroll","length","target","complete","params","categories","join","subscribe","concat","err","selector","template","encapsulation","None"],"mappings":"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","file":"favorites-view-favorites-view-module-es5.js","sourcesContent":["export default \"<ion-content #content>\\n  <!-- Refresh -->\\n  <app-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event)\\\"></app-refresher>\\n  <!-- no data -->\\n  <app-no-data *ngIf=\\\"loaded && (!favorites || favorites.length < 1 || !posts || posts.length < 1)\\\" src=\\\"assets/imgs/no-data-favorites.svg\\\">\\n    <div place class=\\\"ion-margin-bottom\\\">{{'favorites.noData.message'|translate}}</div>\\n    <ion-button color=\\\"danger\\\" size=\\\"small\\\" class=\\\"ion-margin-top\\\" routerLink=\\\"/home/favorites/setting\\\">{{'favorites.noData.button'|translate}}</ion-button>\\n  </app-no-data>\\n  <!-- loading -->\\n  <app-loading *ngIf=\\\"!loaded\\\"></app-loading>\\n  <!-- List posts -->\\n  <app-list-posts *ngIf=\\\"posts\\\" [posts]=\\\"posts\\\"></app-list-posts>\\n  <!-- Load more -->\\n  <app-infinite-scroll threshold=\\\"45%\\\" (ionInfinite)=\\\"load($event)\\\" *ngIf=\\\"!over && posts?.length > 0\\\"></app-infinite-scroll>\\n  <!-- Go to top -->\\n  <app-goto-top slot=\\\"fixed\\\" [content]=\\\"content\\\"></app-goto-top>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { FavoritesViewPage } from './favorites-view.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FavoritesViewPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class FavoritesViewPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { FavoritesViewPageRoutingModule } from './favorites-view-routing.module';\n\nimport { FavoritesViewPage } from './favorites-view.page';\nimport { ComponentsModule } from 'src/app/components/components.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ComponentsModule,\n    TranslateModule,\n    FavoritesViewPageRoutingModule\n  ],\n  declarations: [FavoritesViewPage]\n})\nexport class FavoritesViewPageModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2Zhdm9yaXRlcy12aWV3L2Zhdm9yaXRlcy12aWV3LnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { CoreService } from 'src/app/services/core.service';\n\n@Component({\n  selector: 'app-favorites-view',\n  templateUrl: './favorites-view.page.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./favorites-view.page.scss'],\n})\nexport class FavoritesViewPage implements OnInit {\n  // list categories id in favorites\n  favorites: Number[];\n  // page of posts\n  page = 1;\n  // array Play posts\n  posts: Object[];\n  // set true when loaded posts\n  loaded: boolean;\n  // true if haven't posts when load more disable infiniteScroll\n  over: boolean;\n\n  constructor(\n    private storage: Storage,\n    private core: CoreService,\n  ) {\n    this.doRefresh();\n  }\n\n  ngOnInit() {\n  }\n\n  ionViewDidEnter() {\n    // refresh if setting changed\n    if (this.favorites) this.storage.get('favorites').then(res => {\n      if (!res) res = [];\n      if (JSON.stringify(this.favorites) != JSON.stringify(res)) {\n        this.loaded = false;\n        this.posts = [];\n        this.page = 1;\n        this.doRefresh();\n      }\n    });\n  }\n\n  doRefresh(refresher?) {\n    // when refresh\n    this.storage.get('favorites').then(res => {\n      this.favorites = res || [];\n      this.over = false;\n      if (refresher) this.core.updateTime();\n      this.getPosts(refresher);\n    });\n  }\n\n  getPosts(refresher?, infiniteScroll?) {\n    // empty favorites\n    if (!this.favorites || this.favorites.length < 1) {\n      this.posts = [];\n      this.over = true;\n      this.loaded = true;\n      if (refresher) refresher.target.complete();\n      if (infiniteScroll) infiniteScroll.target.complete();\n      return;\n    }\n    // get posts with page then concat to list post\n    let params = { categories: this.favorites.join(','), page: (refresher ? 1 : this.page) };\n    this.core.getPosts(params).subscribe(posts => {\n      if (refresher) this.page = 1;\n      if (posts.length > 0) this.page++;\n      else this.over = true;\n      if (infiniteScroll) {\n        this.posts = this.posts.concat(posts);\n        infiniteScroll.target.complete();\n      }\n      else this.posts = posts;\n      this.loaded = true;\n      if (refresher) refresher.target.complete();\n    }, err => {\n      if (infiniteScroll) infiniteScroll.target.complete();\n      if (refresher) refresher.target.complete();\n      this.loaded = true;\n    });\n  }\n\n  load(infiniteScroll) {\n    // when scroll to bottom\n    this.getPosts(null, infiniteScroll);\n  }\n}\n"]}