{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\n/**\n * @beta\n * @name Firebase Analytics\n * @description\n * Cordova plugin for Firebase Analytics\n *\n * Go to firebase console and export google-services.json and GoogleService-Info.plist. Put those files into the root of your cordova app folder.\n *\n * NOTE: on iOS in order to collect demographic, age, gender data etc. you should additionally include AdSupport.framework into your project.\n *\n * @usage\n * ```typescript\n * import { FirebaseAnalytics } from '@ionic-native/firebase-analytics/ngx';\n *\n *\n * constructor(private firebaseAnalytics: FirebaseAnalytics) { }\n *\n * ...\n *\n * this.firebaseAnalytics.logEvent('page_view', {page: \"dashboard\"})\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\nexport declare class FirebaseAnalytics extends IonicNativePlugin {\n    /**\n     * Logs an app event.\n     * Be aware of automatically collected events.\n     * @param {string} name The name of the event\n     * @param {any} params Some param to configure something\n     * @return {Promise<any>} Returns a promise\n     */\n    logEvent(name: string, params: any): Promise<any>;\n    /**\n     * Sets the user ID property.\n     * This feature must be used in accordance with Google's Privacy Policy.\n     * @param {string} id The user ID\n     * @return {Promise<any>} Returns a promise\n     */\n    setUserId(id: string): Promise<any>;\n    /**\n     * This feature must be used in accordance with Google's Privacy Policy.\n     * Be aware of automatically collected user properties.\n     * @param {string} name The property name\n     * @param {string} value The property value\n     * @return {Promise<any>} Returns a promise\n     */\n    setUserProperty(name: string, value: string): Promise<any>;\n    /**\n     * Sets whether analytics collection is enabled for this app on this device.\n     * @param {boolean} enabled\n     * @return {Promise<any>} Returns a promise\n     */\n    setEnabled(enabled: boolean): Promise<any>;\n    /**\n     * Sets the current screen name, which specifies the current visual context in your app.\n     * This helps identify the areas in your app where users spend their time and how they interact with your app.\n     * @param {string} name The name of the screen\n     * @return {Promise<any>} Returns a promise\n     */\n    setCurrentScreen(name: string): Promise<any>;\n    /**\n     * Clears all analytics data for this instance from the device and resets the app instance ID\n     * @return {Promise<void>} Returns a promise\n     */\n    resetAnalyticsData(): Promise<void>;\n}\n"]}