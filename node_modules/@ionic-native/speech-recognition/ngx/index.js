import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var SpeechRecognition = /** @class */ (function (_super) {
    __extends(SpeechRecognition, _super);
    function SpeechRecognition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpeechRecognition.prototype.isRecognitionAvailable = function () { return cordova(this, "isRecognitionAvailable", {}, arguments); };
    SpeechRecognition.prototype.startListening = function (options) { return cordova(this, "startListening", { "callbackOrder": "reverse", "observable": true }, arguments); };
    SpeechRecognition.prototype.stopListening = function () { return cordova(this, "stopListening", {}, arguments); };
    SpeechRecognition.prototype.getSupportedLanguages = function () { return cordova(this, "getSupportedLanguages", {}, arguments); };
    SpeechRecognition.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    SpeechRecognition.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    SpeechRecognition.pluginName = "SpeechRecognition";
    SpeechRecognition.plugin = "cordova-plugin-speechrecognition";
    SpeechRecognition.pluginRef = "plugins.speechRecognition";
    SpeechRecognition.repo = "https://github.com/pbakondy/cordova-plugin-speechrecognition";
    SpeechRecognition.platforms = ["Android", "iOS"];
    SpeechRecognition = __decorate([
        Injectable()
    ], SpeechRecognition);
    return SpeechRecognition;
}(IonicNativePlugin));
export { SpeechRecognition };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NwZWVjaC1yZWNvZ25pdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTJHSyxxQ0FBaUI7Ozs7SUFNdEQsa0RBQXNCO0lBWXRCLDBDQUFjLGFBQUMsT0FBMkM7SUFRMUQseUNBQWE7SUFTYixpREFBcUI7SUFTckIseUNBQWE7SUFTYiw2Q0FBaUI7Ozs7OztJQXJETixpQkFBaUI7UUFEN0IsVUFBVSxFQUFFO09BQ0EsaUJBQWlCOzRCQTdHOUI7RUE2R3VDLGlCQUFpQjtTQUEzQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zID1cbiAgfCBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNJT1NcbiAgfCBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNBbmRyb2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWVjaFJlY29nbml0aW9uTGlzdGVuaW5nT3B0aW9uc0lPUyB7XG4gIC8qKlxuICAgKiB1c2VkIGxhbmd1YWdlIGZvciByZWNvZ25pdGlvbiAoZGVmYXVsdCBgXCJlbi1VU1wiYClcbiAgICovXG4gIGxhbmd1YWdlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiB1bWJlciBvZiByZXR1cm4gbWF0Y2hlcyAoZGVmYXVsdCBgNWApXG4gICAqL1xuICBtYXRjaGVzPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBbGxvdyBwYXJ0aWFsIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQgKGRlZmF1bHQgYGZhbHNlYClcbiAgICovXG4gIHNob3dQYXJ0aWFsPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNBbmRyb2lkIHtcbiAgLyoqXG4gICAqIHVzZWQgbGFuZ3VhZ2UgZm9yIHJlY29nbml0aW9uIChkZWZhdWx0IGBcImVuLVVTXCJgKVxuICAgKi9cbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIG51bWJlciBvZiByZXR1cm4gbWF0Y2hlcyAobWF4aW11bSBudW1iZXIgb2YgbWF0Y2hlcylcbiAgICovXG4gIG1hdGNoZXM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIGRpc3BsYXllZCBwcm9tcHQgb2YgbGlzdGVuZXIgcG9wdXAgd2luZG93XG4gICAqL1xuICBwcm9tcHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGRpc3BsYXkgbGlzdGVuZXIgcG9wdXAgd2luZG93IHdpdGggcHJvbXB0IChkZWZhdWx0IGB0cnVlYClcbiAgICovXG4gIHNob3dQb3B1cD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFsbG93IHBhcnRpYWwgcmVzdWx0cyB0byBiZSByZXR1cm5lZCAoZGVmYXVsdCBgZmFsc2VgKVxuICAgKi9cbiAgc2hvd1BhcnRpYWw/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIFNwZWVjaCBSZWNvZ25pdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBkb2VzIHNwZWVjaCByZWNvZ25pdGlvbiB1c2luZyBjbG91ZCBzZXJ2aWNlc1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3BlZWNoUmVjb2duaXRpb24gfSBmcm9tICdAaW9uaWMtbmF0aXZlL3NwZWVjaC1yZWNvZ25pdGlvbi9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3BlZWNoUmVjb2duaXRpb246IFNwZWVjaFJlY29nbml0aW9uKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICpcbiAqIC8vIENoZWNrIGZlYXR1cmUgYXZhaWxhYmxlXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLmlzUmVjb2duaXRpb25BdmFpbGFibGUoKVxuICogICAudGhlbigoYXZhaWxhYmxlOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhhdmFpbGFibGUpKVxuICpcbiAqIC8vIFN0YXJ0IHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLnN0YXJ0TGlzdGVuaW5nKG9wdGlvbnMpXG4gKiAgIC5zdWJzY3JpYmUoXG4gKiAgICAgKG1hdGNoZXM6IHN0cmluZ1tdKSA9PiBjb25zb2xlLmxvZyhtYXRjaGVzKSxcbiAqICAgICAob25lcnJvcikgPT4gY29uc29sZS5sb2coJ2Vycm9yOicsIG9uZXJyb3IpXG4gKiAgIClcbiAqXG4gKiAvLyBTdG9wIHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzIChpT1Mgb25seSlcbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uc3RvcExpc3RlbmluZygpXG4gKlxuICogLy8gR2V0IHRoZSBsaXN0IG9mIHN1cHBvcnRlZCBsYW5ndWFnZXNcbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uZ2V0U3VwcG9ydGVkTGFuZ3VhZ2VzKClcbiAqICAgLnRoZW4oXG4gKiAgICAgKGxhbmd1YWdlczogc3RyaW5nW10pID0+IGNvbnNvbGUubG9nKGxhbmd1YWdlcyksXG4gKiAgICAgKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcilcbiAqICAgKVxuICpcbiAqIC8vIENoZWNrIHBlcm1pc3Npb25cbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uaGFzUGVybWlzc2lvbigpXG4gKiAgIC50aGVuKChoYXNQZXJtaXNzaW9uOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhoYXNQZXJtaXNzaW9uKSlcbiAqXG4gKiAvLyBSZXF1ZXN0IHBlcm1pc3Npb25zXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKClcbiAqICAgLnRoZW4oXG4gKiAgICAgKCkgPT4gY29uc29sZS5sb2coJ0dyYW50ZWQnKSxcbiAqICAgICAoKSA9PiBjb25zb2xlLmxvZygnRGVuaWVkJylcbiAqICAgKVxuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1NwZWVjaFJlY29nbml0aW9uJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3BlZWNocmVjb2duaXRpb24nLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLnNwZWVjaFJlY29nbml0aW9uJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wYmFrb25keS9jb3Jkb3ZhLXBsdWdpbi1zcGVlY2hyZWNvZ25pdGlvbicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTcGVlY2hSZWNvZ25pdGlvbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENoZWNrIGZlYXR1cmUgYXZhaWxhYmxlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzUmVjb2duaXRpb25BdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8IHN0cmluZ1tdID59IGxpc3Qgb2YgcmVjb2duaXplZCB0ZXJtc1xuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBzdGFydExpc3RlbmluZyhvcHRpb25zPzogU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zKTogT2JzZXJ2YWJsZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BMaXN0ZW5pbmcoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8IHN0cmluZ1tdID59IGxpc3Qgb2YgbGFuZ3VhZ2VzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFN1cHBvcnRlZExhbmd1YWdlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHBlcm1pc3Npb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gaGFzIHBlcm1pc3Npb25cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaGFzUGVybWlzc2lvbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCBwZXJtaXNzaW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXF1ZXN0UGVybWlzc2lvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==